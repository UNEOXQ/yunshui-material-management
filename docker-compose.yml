version: '3.8'

services:
  # PostgreSQL 資料庫
  database:
    image: postgres:15-alpine
    container_name: yun-shui-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-yun_shui_materials}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - yun-shui-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-yun_shui_materials}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis (用於 session 和快取)
  redis:
    image: redis:7-alpine
    container_name: yun-shui-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - yun-shui-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 後端 API 服務
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: ${NODE_ENV:-production}
    container_name: yun-shui-backend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3001
      DB_HOST: database
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-yun_shui_materials}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-password}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password}
      JWT_SECRET: ${JWT_SECRET:-your_jwt_secret_key}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-24h}
      UPLOAD_PATH: ${UPLOAD_PATH:-./uploads}
      MAX_FILE_SIZE: ${MAX_FILE_SIZE:-5242880}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
    volumes:
      - backend_uploads:/app/uploads
      - ./backend/logs:/app/logs
    ports:
      - "${BACKEND_PORT:-3001}:3001"
    networks:
      - yun-shui-network
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "dist/scripts/health-check.js"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 前端 Web 服務
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: ${NODE_ENV:-production}
    container_name: yun-shui-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
    ports:
      - "${FRONTEND_PORT:-80}:80"
    networks:
      - yun-shui-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local

networks:
  yun-shui-network:
    driver: bridge