#!/usr/bin/env ts-node\n\nimport { getEnvironmentConfig, getConfigSummary } from '../config/environment';\nimport { checkDatabaseHealth } from '../config/database';\n\n/**\n * 環境配置驗證腳本\n */\nasync function validateEnvironment(): Promise<void> {\n  console.log('🔍 Validating environment configuration...');\n  \n  try {\n    // 載入配置\n    const config = getEnvironmentConfig();\n    console.log('✅ Environment configuration loaded successfully');\n    \n    // 顯示配置摘要\n    console.log('\\n📋 Configuration Summary:');\n    console.table(getConfigSummary());\n    \n    // 驗證資料庫連線\n    console.log('\\n🗄️  Testing database connection...');\n    const dbHealthy = await checkDatabaseHealth();\n    if (dbHealthy) {\n      console.log('✅ Database connection successful');\n    } else {\n      console.log('❌ Database connection failed');\n      process.exit(1);\n    }\n    \n    // 驗證必要目錄\n    console.log('\\n📁 Checking required directories...');\n    const fs = await import('fs/promises');\n    const path = await import('path');\n    \n    const requiredDirs = [\n      config.UPLOAD_PATH,\n      config.LOG_FILE_PATH\n    ];\n    \n    for (const dir of requiredDirs) {\n      try {\n        await fs.access(dir);\n        console.log(`✅ Directory exists: ${dir}`);\n      } catch {\n        console.log(`📁 Creating directory: ${dir}`);\n        await fs.mkdir(dir, { recursive: true });\n        console.log(`✅ Directory created: ${dir}`);\n      }\n    }\n    \n    // 驗證檔案權限\n    console.log('\\n🔐 Checking file permissions...');\n    try {\n      const testFile = path.join(config.UPLOAD_PATH, 'test.txt');\n      await fs.writeFile(testFile, 'test');\n      await fs.unlink(testFile);\n      console.log('✅ Upload directory is writable');\n    } catch (error) {\n      console.log('❌ Upload directory is not writable:', error);\n      process.exit(1);\n    }\n    \n    // 驗證環境特定設定\n    console.log('\\n⚙️  Validating environment-specific settings...');\n    \n    if (config.NODE_ENV === 'production') {\n      // 生產環境檢查\n      if (config.JWT_SECRET.length < 32) {\n        console.log('❌ JWT_SECRET is too short for production');\n        process.exit(1);\n      }\n      \n      if (config.BCRYPT_ROUNDS < 12) {\n        console.log('⚠️  BCRYPT_ROUNDS is low for production (recommended: 12+)');\n      }\n      \n      if (!config.DB_SSL) {\n        console.log('⚠️  Database SSL is disabled in production');\n      }\n      \n      console.log('✅ Production environment validation passed');\n    } else if (config.NODE_ENV === 'development') {\n      // 開發環境檢查\n      if (config.LOG_LEVEL !== 'debug') {\n        console.log('⚠️  LOG_LEVEL is not set to debug in development');\n      }\n      \n      console.log('✅ Development environment validation passed');\n    } else if (config.NODE_ENV === 'test') {\n      // 測試環境檢查\n      if (config.BCRYPT_ROUNDS > 4) {\n        console.log('⚠️  BCRYPT_ROUNDS is high for testing (recommended: 4)');\n      }\n      \n      console.log('✅ Test environment validation passed');\n    }\n    \n    console.log('\\n🎉 Environment validation completed successfully!');\n    \n  } catch (error) {\n    console.error('❌ Environment validation failed:', error);\n    process.exit(1);\n  }\n}\n\n// 執行驗證\nif (require.main === module) {\n  validateEnvironment().catch(error => {\n    console.error('Fatal error:', error);\n    process.exit(1);\n  });\n}\n\nexport { validateEnvironment };"