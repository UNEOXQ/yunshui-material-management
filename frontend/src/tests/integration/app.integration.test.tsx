import { render, screen, waitFor, fireEvent } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport { store } from '../../store';\nimport App from '../../App';\nimport { rest } from 'msw';\nimport { setupServer } from 'msw/node';\n\n/**\n * 前端應用程式整合測試\n */\n\n// Mock API 服務器\nconst server = setupServer(\n  // 認證 API\n  rest.post('/api/auth/login', (req, res, ctx) => {\n    return res(\n      ctx.json({\n        success: true,\n        token: 'mock-jwt-token',\n        user: {\n          id: '1',\n          username: 'testuser',\n          email: 'test@example.com',\n          role: 'PM'\n        }\n      })\n    );\n  }),\n\n  rest.get('/api/auth/profile', (req, res, ctx) => {\n    const authHeader = req.headers.get('authorization');\n    if (!authHeader || !authHeader.includes('mock-jwt-token')) {\n      return res(ctx.status(401), ctx.json({ success: false, error: 'Unauthorized' }));\n    }\n    \n    return res(\n      ctx.json({\n        success: true,\n        user: {\n          id: '1',\n          username: 'testuser',\n          email: 'test@example.com',\n          role: 'PM'\n        }\n      })\n    );\n  }),\n\n  // 材料 API\n  rest.get('/api/materials', (req, res, ctx) => {\n    return res(\n      ctx.json({\n        success: true,\n        materials: [\n          {\n            id: '1',\n            name: 'Test Material 1',\n            category: 'Test Category',\n            price: 100.00,\n            quantity: 50,\n            type: 'AUXILIARY',\n            supplier: 'Test Supplier'\n          },\n          {\n            id: '2',\n            name: 'Test Material 2',\n            category: 'Test Category',\n            price: 200.00,\n            quantity: 30,\n            type: 'FINISHED',\n            supplier: 'Test Supplier 2'\n          }\n        ],\n        pagination: {\n          page: 1,\n          limit: 20,\n          total: 2,\n          totalPages: 1\n        }\n      })\n    );\n  }),\n\n  rest.post('/api/materials', (req, res, ctx) => {\n    return res(\n      ctx.json({\n        success: true,\n        material: {\n          id: '3',\n          name: 'New Test Material',\n          category: 'New Category',\n          price: 150.00,\n          quantity: 25,\n          type: 'AUXILIARY',\n          supplier: 'New Supplier'\n        }\n      })\n    );\n  }),\n\n  // 訂單 API\n  rest.get('/api/orders', (req, res, ctx) => {\n    return res(\n      ctx.json({\n        success: true,\n        orders: [\n          {\n            id: '1',\n            projectId: 'PROJECT_001',\n            status: 'PENDING',\n            type: 'AUXILIARY',\n            materials: [\n              {\n                materialId: '1',\n                quantity: 10,\n                unitPrice: 100.00\n              }\n            ],\n            totalAmount: 1000.00,\n            createdAt: new Date().toISOString()\n          }\n        ],\n        pagination: {\n          page: 1,\n          limit: 20,\n          total: 1,\n          totalPages: 1\n        }\n      })\n    );\n  }),\n\n  rest.post('/api/orders', (req, res, ctx) => {\n    return res(\n      ctx.json({\n        success: true,\n        order: {\n          id: '2',\n          projectId: 'PROJECT_002',\n          status: 'PENDING',\n          type: 'AUXILIARY',\n          materials: [\n            {\n              materialId: '1',\n              quantity: 5,\n              unitPrice: 100.00\n            }\n          ],\n          totalAmount: 500.00,\n          createdAt: new Date().toISOString()\n        }\n      })\n    );\n  }),\n\n  // 狀態更新 API\n  rest.get('/api/status', (req, res, ctx) => {\n    return res(\n      ctx.json({\n        success: true,\n        statusUpdates: [\n          {\n            id: '1',\n            projectId: 'PROJECT_001',\n            status: 'Order Placed',\n            notes: 'Order has been placed',\n            createdAt: new Date().toISOString()\n          }\n        ]\n      })\n    );\n  })\n);\n\n// 測試工具函數\nfunction renderWithProviders(ui: React.ReactElement) {\n  return render(\n    <Provider store={store}>\n      <BrowserRouter>\n        {ui}\n      </BrowserRouter>\n    </Provider>\n  );\n}\n\ndescribe('App Integration Tests', () => {\n  beforeAll(() => {\n    server.listen();\n  });\n\n  afterEach(() => {\n    server.resetHandlers();\n  });\n\n  afterAll(() => {\n    server.close();\n  });\n\n  describe('Authentication Flow', () => {\n    it('should handle complete login flow', async () => {\n      const user = userEvent.setup();\n      \n      renderWithProviders(<App />);\n\n      // 應該顯示登入頁面\n      expect(screen.getByText(/登入/i)).toBeInTheDocument();\n\n      // 填寫登入表單\n      const usernameInput = screen.getByLabelText(/使用者名稱/i);\n      const passwordInput = screen.getByLabelText(/密碼/i);\n      const loginButton = screen.getByRole('button', { name: /登入/i });\n\n      await user.type(usernameInput, 'testuser');\n      await user.type(passwordInput, 'password123');\n      await user.click(loginButton);\n\n      // 應該導向儀表板\n      await waitFor(() => {\n        expect(screen.getByText(/儀表板/i)).toBeInTheDocument();\n      });\n\n      // 應該顯示使用者資訊\n      expect(screen.getByText(/testuser/i)).toBeInTheDocument();\n    });\n\n    it('should handle login failure', async () => {\n      const user = userEvent.setup();\n      \n      // Mock 登入失敗\n      server.use(\n        rest.post('/api/auth/login', (req, res, ctx) => {\n          return res(\n            ctx.status(401),\n            ctx.json({ success: false, error: 'Invalid credentials' })\n          );\n        })\n      );\n\n      renderWithProviders(<App />);\n\n      const usernameInput = screen.getByLabelText(/使用者名稱/i);\n      const passwordInput = screen.getByLabelText(/密碼/i);\n      const loginButton = screen.getByRole('button', { name: /登入/i });\n\n      await user.type(usernameInput, 'wronguser');\n      await user.type(passwordInput, 'wrongpassword');\n      await user.click(loginButton);\n\n      // 應該顯示錯誤訊息\n      await waitFor(() => {\n        expect(screen.getByText(/Invalid credentials/i)).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Material Management Flow', () => {\n    beforeEach(async () => {\n      // 先登入\n      const user = userEvent.setup();\n      renderWithProviders(<App />);\n      \n      const usernameInput = screen.getByLabelText(/使用者名稱/i);\n      const passwordInput = screen.getByLabelText(/密碼/i);\n      const loginButton = screen.getByRole('button', { name: /登入/i });\n\n      await user.type(usernameInput, 'testuser');\n      await user.type(passwordInput, 'password123');\n      await user.click(loginButton);\n\n      await waitFor(() => {\n        expect(screen.getByText(/儀表板/i)).toBeInTheDocument();\n      });\n    });\n\n    it('should display and manage materials', async () => {\n      const user = userEvent.setup();\n      \n      // 導航到材料管理頁面\n      const materialLink = screen.getByText(/材料管理/i);\n      await user.click(materialLink);\n\n      // 應該顯示材料列表\n      await waitFor(() => {\n        expect(screen.getByText('Test Material 1')).toBeInTheDocument();\n        expect(screen.getByText('Test Material 2')).toBeInTheDocument();\n      });\n\n      // 測試篩選功能\n      const typeFilter = screen.getByLabelText(/材料類型/i);\n      await user.selectOptions(typeFilter, 'AUXILIARY');\n\n      // 應該只顯示輔材\n      await waitFor(() => {\n        expect(screen.getByText('Test Material 1')).toBeInTheDocument();\n      });\n    });\n\n    it('should create new material', async () => {\n      const user = userEvent.setup();\n      \n      // 導航到材料管理頁面\n      const materialLink = screen.getByText(/材料管理/i);\n      await user.click(materialLink);\n\n      // 點擊新增材料按鈕\n      const addButton = screen.getByText(/新增材料/i);\n      await user.click(addButton);\n\n      // 填寫材料表單\n      const nameInput = screen.getByLabelText(/材料名稱/i);\n      const categoryInput = screen.getByLabelText(/分類/i);\n      const priceInput = screen.getByLabelText(/價格/i);\n      const quantityInput = screen.getByLabelText(/數量/i);\n      const submitButton = screen.getByRole('button', { name: /儲存/i });\n\n      await user.type(nameInput, 'New Test Material');\n      await user.type(categoryInput, 'New Category');\n      await user.type(priceInput, '150');\n      await user.type(quantityInput, '25');\n      await user.click(submitButton);\n\n      // 應該顯示成功訊息\n      await waitFor(() => {\n        expect(screen.getByText(/材料創建成功/i)).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Order Management Flow', () => {\n    beforeEach(async () => {\n      // 先登入\n      const user = userEvent.setup();\n      renderWithProviders(<App />);\n      \n      const usernameInput = screen.getByLabelText(/使用者名稱/i);\n      const passwordInput = screen.getByLabelText(/密碼/i);\n      const loginButton = screen.getByRole('button', { name: /登入/i });\n\n      await user.type(usernameInput, 'testuser');\n      await user.type(passwordInput, 'password123');\n      await user.click(loginButton);\n\n      await waitFor(() => {\n        expect(screen.getByText(/儀表板/i)).toBeInTheDocument();\n      });\n    });\n\n    it('should display orders and create new order', async () => {\n      const user = userEvent.setup();\n      \n      // 導航到訂單管理頁面\n      const orderLink = screen.getByText(/訂單管理/i);\n      await user.click(orderLink);\n\n      // 應該顯示訂單列表\n      await waitFor(() => {\n        expect(screen.getByText('PROJECT_001')).toBeInTheDocument();\n      });\n\n      // 點擊新增訂單\n      const addOrderButton = screen.getByText(/新增訂單/i);\n      await user.click(addOrderButton);\n\n      // 填寫訂單表單\n      const projectIdInput = screen.getByLabelText(/專案編號/i);\n      await user.type(projectIdInput, 'PROJECT_002');\n\n      // 選擇材料\n      const materialSelect = screen.getByLabelText(/選擇材料/i);\n      await user.click(materialSelect);\n      \n      const material1 = screen.getByText('Test Material 1');\n      await user.click(material1);\n\n      // 設定數量\n      const quantityInput = screen.getByLabelText(/數量/i);\n      await user.type(quantityInput, '5');\n\n      // 提交訂單\n      const submitButton = screen.getByRole('button', { name: /創建訂單/i });\n      await user.click(submitButton);\n\n      // 應該顯示成功訊息\n      await waitFor(() => {\n        expect(screen.getByText(/訂單創建成功/i)).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Status Management Flow', () => {\n    beforeEach(async () => {\n      // 先登入\n      const user = userEvent.setup();\n      renderWithProviders(<App />);\n      \n      const usernameInput = screen.getByLabelText(/使用者名稱/i);\n      const passwordInput = screen.getByLabelText(/密碼/i);\n      const loginButton = screen.getByRole('button', { name: /登入/i });\n\n      await user.type(usernameInput, 'testuser');\n      await user.type(passwordInput, 'password123');\n      await user.click(loginButton);\n\n      await waitFor(() => {\n        expect(screen.getByText(/儀表板/i)).toBeInTheDocument();\n      });\n    });\n\n    it('should display and manage project status', async () => {\n      const user = userEvent.setup();\n      \n      // 導航到狀態管理頁面\n      const statusLink = screen.getByText(/狀態管理/i);\n      await user.click(statusLink);\n\n      // 應該顯示狀態列表\n      await waitFor(() => {\n        expect(screen.getByText('PROJECT_001')).toBeInTheDocument();\n        expect(screen.getByText('Order Placed')).toBeInTheDocument();\n      });\n\n      // 測試狀態篩選\n      const projectFilter = screen.getByLabelText(/專案篩選/i);\n      await user.type(projectFilter, 'PROJECT_001');\n\n      // 應該只顯示相關專案的狀態\n      await waitFor(() => {\n        expect(screen.getByText('PROJECT_001')).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle API errors gracefully', async () => {\n      const user = userEvent.setup();\n      \n      // Mock API 錯誤\n      server.use(\n        rest.get('/api/materials', (req, res, ctx) => {\n          return res(\n            ctx.status(500),\n            ctx.json({ success: false, error: 'Internal server error' })\n          );\n        })\n      );\n\n      renderWithProviders(<App />);\n\n      // 先登入\n      const usernameInput = screen.getByLabelText(/使用者名稱/i);\n      const passwordInput = screen.getByLabelText(/密碼/i);\n      const loginButton = screen.getByRole('button', { name: /登入/i });\n\n      await user.type(usernameInput, 'testuser');\n      await user.type(passwordInput, 'password123');\n      await user.click(loginButton);\n\n      await waitFor(() => {\n        expect(screen.getByText(/儀表板/i)).toBeInTheDocument();\n      });\n\n      // 導航到材料管理頁面\n      const materialLink = screen.getByText(/材料管理/i);\n      await user.click(materialLink);\n\n      // 應該顯示錯誤訊息\n      await waitFor(() => {\n        expect(screen.getByText(/載入失敗/i)).toBeInTheDocument();\n      });\n    });\n\n    it('should handle network errors', async () => {\n      const user = userEvent.setup();\n      \n      // Mock 網路錯誤\n      server.use(\n        rest.post('/api/auth/login', (req, res, ctx) => {\n          return res.networkError('Network error');\n        })\n      );\n\n      renderWithProviders(<App />);\n\n      const usernameInput = screen.getByLabelText(/使用者名稱/i);\n      const passwordInput = screen.getByLabelText(/密碼/i);\n      const loginButton = screen.getByRole('button', { name: /登入/i });\n\n      await user.type(usernameInput, 'testuser');\n      await user.type(passwordInput, 'password123');\n      await user.click(loginButton);\n\n      // 應該顯示網路錯誤訊息\n      await waitFor(() => {\n        expect(screen.getByText(/網路連線錯誤/i)).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Responsive Design', () => {\n    it('should adapt to mobile viewport', async () => {\n      // 設定行動裝置視窗大小\n      Object.defineProperty(window, 'innerWidth', {\n        writable: true,\n        configurable: true,\n        value: 375,\n      });\n      \n      Object.defineProperty(window, 'innerHeight', {\n        writable: true,\n        configurable: true,\n        value: 667,\n      });\n      \n      // 觸發 resize 事件\n      fireEvent(window, new Event('resize'));\n\n      const user = userEvent.setup();\n      renderWithProviders(<App />);\n\n      // 先登入\n      const usernameInput = screen.getByLabelText(/使用者名稱/i);\n      const passwordInput = screen.getByLabelText(/密碼/i);\n      const loginButton = screen.getByRole('button', { name: /登入/i });\n\n      await user.type(usernameInput, 'testuser');\n      await user.type(passwordInput, 'password123');\n      await user.click(loginButton);\n\n      await waitFor(() => {\n        expect(screen.getByText(/儀表板/i)).toBeInTheDocument();\n      });\n\n      // 應該顯示行動版導航\n      expect(screen.getByLabelText(/開啟選單/i)).toBeInTheDocument();\n    });\n  });\n});"