import React, { useState, useEffect } from 'react';
import { Project } from '../../types';
import { projectService } from '../../services/projectService';
import './ProjectTags.css';

interface ProjectTagsProps {
  selectedProjectId?: string;
  onProjectSelect: (projectId: string | null) => void;
  onProjectDelete?: (projectId: string) => void;
  onProjectCreate?: (projectName: string) => void;
  showManagementButtons?: boolean;
  className?: string;
}

export const ProjectTags: React.FC<ProjectTagsProps> = ({
  selectedProjectId,
  onProjectSelect,
  onProjectDelete,
  onProjectCreate,
  showManagementButtons = false,
  className = ''
}) => {
  const [projects, setProjects] = useState<Project[]>([]);
  const [loading, setLoading] = useState(false);
  const [showCreateInput, setShowCreateInput] = useState(false);
  const [newProjectName, setNewProjectName] = useState('');
  const [currentPage, setCurrentPage] = useState(0);
  const projectsPerPage = 8; // ÊØèÈ†ÅÈ°ØÁ§∫ÁöÑÂ∞àÊ°àÊï∏Èáè

  useEffect(() => {
    loadProjects();
  }, []);

  const loadProjects = async () => {
    try {
      setLoading(true);
      const response = await projectService.getAllProjects();
      
      if (response.success && Array.isArray(response.data)) {
        // Âè™È°ØÁ§∫Ê¥ªË∫çÁöÑÂ∞àÊ°àÔºå‰∏¶ÊéíÈô§Ëá™ÂãïÂâµÂª∫ÁöÑÂ∞àÊ°à
        const activeProjects = response.data.filter(p => 
          p.overallStatus === 'ACTIVE' && 
          !p.projectName.includes('ËºîÊùêÂ∞àÊ°à-') &&
          !p.projectName.includes('ÊàêÂìÅÂ∞àÊ°à-')
        );
        setProjects(activeProjects);
        console.log('‚úÖ Â∞àÊ°àÂàóË°®ËºâÂÖ•ÊàêÂäü:', activeProjects.length, 'ÂÄãÂ∞àÊ°à');
        console.log('üìã Â∞àÊ°àÂàóË°®:', activeProjects.map(p => ({ id: p.id, name: p.projectName })));
        console.log('üîß showManagementButtons:', showManagementButtons);
      }
    } catch (error) {
      console.error('ËºâÂÖ•Â∞àÊ°àÂ§±Êïó:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleTagClick = (projectId: string) => {
    if (selectedProjectId === projectId) {
      // Â¶ÇÊûúÈªûÊìäÂ∑≤ÈÅ∏‰∏≠ÁöÑÊ®ôÁ±§ÔºåÂèñÊ∂àÈÅ∏Êìá
      onProjectSelect(null);
    } else {
      // ÈÅ∏ÊìáÊñ∞ÁöÑÂ∞àÊ°à
      onProjectSelect(projectId);
    }
  };

  const handleShowAll = () => {
    onProjectSelect(null);
  };

  const handleDeleteProject = async (e: React.MouseEvent, projectId: string) => {
    e.stopPropagation(); // Èò≤Ê≠¢Ëß∏ÁôºÊ®ôÁ±§ÈªûÊìä
    
    const project = projects.find(p => p.id === projectId);
    if (!project) return;
    
    if (confirm(`Á¢∫ÂÆöË¶ÅÂà™Èô§Â∞àÊ°à„Äå${project.projectName}„ÄçÂóéÔºü\n\nÊ≥®ÊÑèÔºöÈÄô‰∏çÊúÉÂà™Èô§Ë®ÇÂñÆÔºåÂè™ÊúÉÂ∞áË®ÇÂñÆÂæûÂ∞àÊ°à‰∏≠ÁßªÈô§„ÄÇ`)) {
      try {
        const response = await projectService.deleteProject(projectId);
        if (response.success) {
          // Êõ¥Êñ∞Êú¨Âú∞Â∞àÊ°àÂàóË°®
          setProjects(prev => prev.filter(p => p.id !== projectId));
          
          // Â¶ÇÊûúÂà™Èô§ÁöÑÊòØÁï∂ÂâçÈÅ∏‰∏≠ÁöÑÂ∞àÊ°àÔºåÂàáÊèõÂà∞ÂÖ®ÈÉ®Ë®ÇÂñÆ
          if (selectedProjectId === projectId) {
            onProjectSelect(null);
          }
          
          // ÈÄöÁü•Áà∂ÁµÑ‰ª∂
          if (onProjectDelete) {
            onProjectDelete(projectId);
          }
          
          alert('Â∞àÊ°àÂ∑≤Âà™Èô§ÔºåÁõ∏ÈóúË®ÇÂñÆÂ∑≤ÁßªÈô§Â∞àÊ°àÊ≠∏Â±¨');
        } else {
          alert(`Âà™Èô§Â§±Êïó: ${response.message}`);
        }
      } catch (error: any) {
        console.error('Âà™Èô§Â∞àÊ°àÂ§±Êïó:', error);
        alert(`Âà™Èô§Â§±Êïó: ${error.message}`);
      }
    }
  };

  const handleCreateProject = async () => {
    if (!newProjectName.trim()) {
      alert('Ë´ãËº∏ÂÖ•Â∞àÊ°àÂêçÁ®±');
      return;
    }
    
    try {
      const response = await projectService.createProject({
        projectName: newProjectName.trim(),
        description: 'ÊâãÂãïÂâµÂª∫ÁöÑÂ∞àÊ°à'
      });
      
      if (response.success && response.data) {
        const newProject = response.data as Project;
        
        // Êõ¥Êñ∞Êú¨Âú∞Â∞àÊ°àÂàóË°®
        setProjects(prev => [newProject, ...prev]);
        
        // ÈáçÁΩÆËº∏ÂÖ•ÁãÄÊÖã
        setNewProjectName('');
        setShowCreateInput(false);
        
        // ÈÄöÁü•Áà∂ÁµÑ‰ª∂
        if (onProjectCreate) {
          onProjectCreate(newProject.projectName);
        }
        
        alert(`Â∞àÊ°à„Äå${newProject.projectName}„ÄçÂâµÂª∫ÊàêÂäüÔºÅ`);
      } else {
        alert(`ÂâµÂª∫Â§±Êïó: ${response.message}`);
      }
    } catch (error: any) {
      console.error('ÂâµÂª∫Â∞àÊ°àÂ§±Êïó:', error);
      alert(`ÂâµÂª∫Â§±Êïó: ${error.message}`);
    }
  };

  const handleCancelCreate = () => {
    setShowCreateInput(false);
    setNewProjectName('');
  };

  // ÂàÜÈ†ÅÈÇèËºØ
  const totalPages = Math.ceil(projects.length / projectsPerPage);
  const startIndex = currentPage * projectsPerPage;
  const endIndex = startIndex + projectsPerPage;
  const currentProjects = projects.slice(startIndex, endIndex);
  const showPagination = projects.length > projectsPerPage;

  const handleNextPage = () => {
    if (currentPage < totalPages - 1) {
      setCurrentPage(currentPage + 1);
    }
  };

  const handlePrevPage = () => {
    if (currentPage > 0) {
      setCurrentPage(currentPage - 1);
    }
  };

  if (loading) {
    return (
      <div className={`project-tags ${className}`}>
        <span className="loading-text">ËºâÂÖ•Â∞àÊ°à‰∏≠...</span>
      </div>
    );
  }

  if (projects.length === 0) {
    return (
      <div className={`project-tags ${className}`}>
        <span className="no-projects-text">Â∞öÁÑ°Â∞àÊ°à</span>
      </div>
    );
  }

  return (
    <div className={`project-tags ${className}`}>
      <div className="project-tags-header">
        <button
          className={`project-tag all-tag ${!selectedProjectId ? 'active' : ''}`}
          onClick={handleShowAll}
        >
          ÂÖ®ÈÉ®Ë®ÇÂñÆ
        </button>
        
        {showPagination && (
          <div className="pagination-info">
            Á¨¨ {currentPage + 1} È†ÅÔºåÂÖ± {totalPages} È†Å
          </div>
        )}
      </div>
      
      <div className="project-tags-content">
        {currentProjects.map(project => (
          <button
            key={project.id}
            className={`project-tag ${selectedProjectId === project.id ? 'active' : ''}`}
            onClick={() => handleTagClick(project.id)}
            title={`Â∞àÊ°àÔºö${project.projectName}`}
          >
            üìÅ {project.projectName}
            {showManagementButtons && (
              <span
                className="project-delete-btn"
                onClick={(e) => handleDeleteProject(e, project.id)}
                title={`Âà™Èô§Â∞àÊ°à„Äå${project.projectName}„Äç`}
              >
                √ó
              </span>
            )}
          </button>
        ))}
        
        {showManagementButtons && (
          <>
            {showCreateInput ? (
              <div className="project-create-input">
                <input
                  type="text"
                  value={newProjectName}
                  onChange={(e) => setNewProjectName(e.target.value)}
                  placeholder="Ëº∏ÂÖ•Â∞àÊ°àÂêçÁ®±"
                  maxLength={50}
                  autoFocus
                  onKeyDown={(e) => {
                    if (e.key === 'Enter') handleCreateProject();
                    if (e.key === 'Escape') handleCancelCreate();
                  }}
                />
                <button
                  className="create-confirm-btn"
                  onClick={handleCreateProject}
                  disabled={!newProjectName.trim()}
                >
                  ‚úì
                </button>
                <button
                  className="create-cancel-btn"
                  onClick={handleCancelCreate}
                >
                  √ó
                </button>
              </div>
            ) : (
              <button
                className="project-tag create-tag"
                onClick={() => setShowCreateInput(true)}
                title="ÂâµÂª∫Êñ∞Â∞àÊ°à"
              >
                + Êñ∞Â∞àÊ°à
              </button>
            )}
          </>
        )}
      </div>
      
      {showPagination && (
        <div className="project-tags-pagination">
          <button
            className="pagination-btn"
            onClick={handlePrevPage}
            disabled={currentPage === 0}
            title="‰∏ä‰∏ÄÈ†Å"
          >
            ‚Äπ
          </button>
          <button
            className="pagination-btn"
            onClick={handleNextPage}
            disabled={currentPage >= totalPages - 1}
            title="‰∏ã‰∏ÄÈ†Å"
          >
            ‚Ä∫
          </button>
        </div>
      )}
    </div>
  );
};