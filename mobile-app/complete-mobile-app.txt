import React, { useState, useEffect } from 'react';
import { View, Text, StyleSheet, TouchableOpacity, ScrollView, Alert, ActivityIndicator, TextInput, Modal, Picker, Image } from 'react-native';
import { launchImageLibrary, launchCamera } from 'react-native-image-picker';

// API 配置
const API_BASE_URL = 'http://192.168.68.95:3004/api';

// 完整的 API 服務
const apiService = {
  // 認證相關
  login: async (username: string, password: string) => {
    try {
      const response = await fetch(`${API_BASE_URL}/auth/login`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ username, password }),
      });
      return await response.json();
    } catch (error) {
      return { success: false, error: error.message };
    }
  },

  // 基材管理
  getMaterials: async (token: string) => {
    try {
      const response = await fetch(`${API_BASE_URL}/materials`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      const data = await response.json();
      if (data.success && data.data) {
        return Array.isArray(data.data) ? data.data : data.data.materials || [];
      }
      return [];
    } catch (error) {
      console.error('取得基材失敗:', error);
      return [];
    }
  },

  createMaterial: async (token: string, material: any) => {
    try {
      const response = await fetch(`${API_BASE_URL}/materials`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(material),
      });
      return await response.json();
    } catch (error) {
      return { success: false, error: error.message };
    }
  },

  getCategories: async (token: string) => {
    try {
      const response = await fetch(`${API_BASE_URL}/materials/categories`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      const data = await response.json();
      return data.success ? data.data.categories : [];
    } catch (error) {
      return [];
    }
  },

  getSuppliers: async (token: string) => {
    try {
      const response = await fetch(`${API_BASE_URL}/materials/suppliers`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      const data = await response.json();
      return data.success ? data.data.suppliers : [];
    } catch (error) {
      return [];
    }
  },

  // 訂單管理
  getOrders: async (token: string) => {
    try {
      const response = await fetch(`${API_BASE_URL}/orders`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      const data = await response.json();
      if (data.success && data.data) {
        return Array.isArray(data.data) ? data.data : data.data.orders || [];
      }
      return [];
    } catch (error) {
      return [];
    }
  },

  createOrder: async (token: string, order: any) => {
    try {
      const response = await fetch(`${API_BASE_URL}/orders`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(order),
      });
      return await response.json();
    } catch (error) {
      return { success: false, error: error.message };
    }
  },

  // 圖片上傳
  uploadImage: async (token: string, imageUri: string) => {
    try {
      const formData = new FormData();
      formData.append('image', {
        uri: imageUri,
        type: 'image/jpeg',
        name: 'material_image.jpg',
      } as any);

      const response = await fetch(`${API_BASE_URL}/upload/image`, {
        method: 'POST',
        headers: {
          'Content-Type': 'multipart/form-data',
          'Authorization': `Bearer ${token}`
        },
        body: formData,
      });
      return await response.json();
    } catch (error) {
      return { success: false, error: error.message };
    }
  },
};

export default function App() {
  // 認證狀態
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [authToken, setAuthToken] = useState('');
  const [currentUser, setCurrentUser] = useState(null);
  
  // 登入表單
  const [loginForm, setLoginForm] = useState({ username: '', password: '' });
  const [loginLoading, setLoginLoading] = useState(false);

  // 主要狀態
  const [currentPage, setCurrentPage] = useState('dashboard');
  const [materials, setMaterials] = useState([]);
  const [orders, setOrders] = useState([]);
  const [loading, setLoading] = useState(false);

  // 基材表單狀態
  const [showMaterialForm, setShowMaterialForm] = useState(false);
  const [materialForm, setMaterialForm] = useState({
    name: '',
    category: '',
    supplier: '',
    price: '',
    quantity: '',
    type: 'AUXILIARY',
    imageUrl: ''
  });
  const [categories, setCategories] = useState([]);
  const [suppliers, setSuppliers] = useState([]);

  // 訂單表單狀態
  const [showOrderForm, setShowOrderForm] = useState(false);
  const [orderForm, setOrderForm] = useState({
    customerName: '',
    projectName: '',
    items: [],
    totalAmount: '',
    status: 'PENDING'
  });
  const [showMaterialSelection, setShowMaterialSelection] = useState(false);
  const [selectedMaterials, setSelectedMaterials] = useState([]);

  // 圖片相關
  const [showImagePicker, setShowImagePicker] = useState(false);
  const [uploadingImage, setUploadingImage] = useState(false);

  // 檢查登入狀態
  useEffect(() => {
    checkAuthStatus();
  }, []);

  const checkAuthStatus = async () => {
    // 檢查本地存儲的 token
    // 這裡可以實現自動登入邏輯
  };

  // 登入處理
  const handleLogin = async () => {
    if (!loginForm.username || !loginForm.password) {
      Alert.alert('錯誤', '請輸入帳號和密碼');
      return;
    }

    setLoginLoading(true);
    const result = await apiService.login(loginForm.username, loginForm.password);
    
    if (result.success) {
      setAuthToken(result.data.token);
      setCurrentUser(result.data.user);
      setIsLoggedIn(true);
      loadInitialData(result.data.token);
    } else {
      Alert.alert('登入失敗', result.message || '帳號或密碼錯誤');
    }
    setLoginLoading(false);
  };

  // 載入初始資料
  const loadInitialData = async (token: string) => {
    setLoading(true);
    try {
      const [materialsData, ordersData, categoriesData, suppliersData] = await Promise.all([
        apiService.getMaterials(token),
        apiService.getOrders(token),
        apiService.getCategories(token),
        apiService.getSuppliers(token),
      ]);
      
      setMaterials(materialsData);
      setOrders(ordersData);
      setCategories(categoriesData);
      setSuppliers(suppliersData);
    } catch (error) {
      Alert.alert('錯誤', '載入資料失敗');
    } finally {
      setLoading(false);
    }
  };

  // 登出
  const handleLogout = () => {
    setIsLoggedIn(false);
    setAuthToken('');
    setCurrentUser(null);
    setCurrentPage('dashboard');
  };

  // 新增基材
  const handleAddMaterial = async () => {
    if (!materialForm.name || !materialForm.category || !materialForm.price) {
      Alert.alert('錯誤', '請填寫必要欄位：名稱、分類、價格');
      return;
    }

    setLoading(true);
    const result = await apiService.createMaterial(authToken, {
      name: materialForm.name,
      category: materialForm.category,
      supplier: materialForm.supplier,
      price: parseFloat(materialForm.price),
      quantity: parseInt(materialForm.quantity) || 0,
      type: materialForm.type,
      imageUrl: materialForm.imageUrl
    });

    if (result.success) {
      Alert.alert('成功', '基材新增成功');
      setShowMaterialForm(false);
      setMaterialForm({
        name: '', category: '', supplier: '', price: '', quantity: '', type: 'AUXILIARY', imageUrl: ''
      });
      loadInitialData(authToken);
    } else {
      Alert.alert('錯誤', result.error || '新增基材失敗');
    }
    setLoading(false);
  };

  // 圖片選擇
  const handleImagePicker = () => {
    Alert.alert(
      '選擇圖片',
      '請選擇圖片來源',
      [
        { text: '取消', style: 'cancel' },
        { text: '相機', onPress: () => openCamera() },
        { text: '相簿', onPress: () => openImageLibrary() },
      ]
    );
  };

  const openCamera = () => {
    launchCamera({ mediaType: 'photo', quality: 0.8 }, handleImageResponse);
  };

  const openImageLibrary = () => {
    launchImageLibrary({ mediaType: 'photo', quality: 0.8 }, handleImageResponse);
  };

  const handleImageResponse = async (response: any) => {
    if (response.assets && response.assets[0]) {
      setUploadingImage(true);
      const result = await apiService.uploadImage(authToken, response.assets[0].uri);
      
      if (result.success) {
        setMaterialForm(prev => ({ ...prev, imageUrl: result.data.imageUrl }));
        Alert.alert('成功', '圖片上傳成功');
      } else {
        Alert.alert('錯誤', '圖片上傳失敗');
      }
      setUploadingImage(false);
    }
  };

  // 新增訂單
  const handleAddOrder = async () => {
    if (!orderForm.customerName || selectedMaterials.length === 0) {
      Alert.alert('錯誤', '請填寫客戶名稱並選擇基材');
      return;
    }

    setLoading(true);
    const result = await apiService.createOrder(authToken, {
      customerName: orderForm.customerName,
      projectName: orderForm.projectName,
      items: selectedMaterials,
      status: orderForm.status
    });

    if (result.success) {
      Alert.alert('成功', '訂單建立成功');
      setShowOrderForm(false);
      setOrderForm({ customerName: '', projectName: '', items: [], totalAmount: '', status: 'PENDING' });
      setSelectedMaterials([]);
      loadInitialData(authToken);
    } else {
      Alert.alert('錯誤', result.error || '建立訂單失敗');
    }
    setLoading(false);
  };

  // 登入畫面
  if (!isLoggedIn) {
    return (
      <View style={styles.loginContainer}>
        <View style={styles.loginForm}>
          <Text style={styles.loginTitle}>🏗️ 雲水基材管理系統</Text>
          <Text style={styles.loginSubtitle}>手機版登入</Text>
          
          <TextInput
            style={styles.loginInput}
            placeholder="帳號"
            value={loginForm.username}
            onChangeText={(text) => setLoginForm(prev => ({ ...prev, username: text }))}
            autoCapitalize="none"
          />
          
          <TextInput
            style={styles.loginInput}
            placeholder="密碼"
            value={loginForm.password}
            onChangeText={(text) => setLoginForm(prev => ({ ...prev, password: text }))}
            secureTextEntry
          />
          
          <TouchableOpacity 
            style={styles.loginButton} 
            onPress={handleLogin}
            disabled={loginLoading}
          >
            {loginLoading ? (
              <ActivityIndicator color="#fff" />
            ) : (
              <Text style={styles.loginButtonText}>登入</Text>
            )}
          </TouchableOpacity>
        </View>
      </View>
    );
  }

  // 儀表板
  const renderDashboard = () => (
    <ScrollView style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.title}>🏗️ 雲水基材管理系統</Text>
        <Text style={styles.subtitle}>歡迎，{currentUser?.username}</Text>
        <TouchableOpacity style={styles.logoutButton} onPress={handleLogout}>
          <Text style={styles.logoutText}>登出</Text>
        </TouchableOpacity>
      </View>
      
      <View style={styles.statsContainer}>
        <View style={styles.statCard}>
          <Text style={styles.statNumber}>{orders.length}</Text>
          <Text style={styles.statLabel}>總訂單數</Text>
        </View>
        <View style={styles.statCard}>
          <Text style={styles.statNumber}>{materials.length}</Text>
          <Text style={styles.statLabel}>基材種類</Text>
        </View>
      </View>

      <View style={styles.quickActions}>
        <TouchableOpacity style={styles.actionButton} onPress={() => setCurrentPage('materials')}>
          <Text style={styles.actionText}>📦 基材管理</Text>
        </TouchableOpacity>
        <TouchableOpacity style={styles.actionButton} onPress={() => setCurrentPage('orders')}>
          <Text style={styles.actionText}>📋 訂單管理</Text>
        </TouchableOpacity>
        <TouchableOpacity style={styles.actionButton} onPress={() => setCurrentPage('status')}>
          <Text style={styles.actionText}>📊 狀態管理</Text>
        </TouchableOpacity>
      </View>
    </ScrollView>
  );

  // 基材管理
  const renderMaterials = () => (
    <ScrollView style={styles.container}>
      <View style={styles.pageHeader}>
        <Text style={styles.pageTitle}>📦 基材管理</Text>
        <TouchableOpacity style={styles.addButton} onPress={() => setShowMaterialForm(true)}>
          <Text style={styles.addButtonText}>+ 新增</Text>
        </TouchableOpacity>
      </View>
      
      {materials.map((material, index) => (
        <View key={material.id || index} style={styles.materialCard}>
          {material.imageUrl && (
            <Image source={{ uri: material.imageUrl }} style={styles.materialImage} />
          )}
          <View style={styles.materialInfo}>
            <Text style={styles.materialName}>{material.name}</Text>
            <Text style={styles.materialCategory}>分類: {material.category}</Text>
            <Text style={styles.materialSupplier}>供應商: {material.supplier || '未指定'}</Text>
            <Text style={styles.materialType}>類型: {material.type === 'AUXILIARY' ? '輔材' : '完成材'}</Text>
            <Text style={styles.materialPrice}>價格: CAD ${material.price}</Text>
            <Text style={styles.materialQuantity}>庫存: {material.quantity}</Text>
          </View>
        </View>
      ))}

      <TouchableOpacity style={styles.backButton} onPress={() => setCurrentPage('dashboard')}>
        <Text style={styles.backText}>← 返回儀表板</Text>
      </TouchableOpacity>
    </ScrollView>
  );

  // 訂單管理
  const renderOrders = () => (
    <ScrollView style={styles.container}>
      <View style={styles.pageHeader}>
        <Text style={styles.pageTitle}>📋 訂單管理</Text>
        <TouchableOpacity style={styles.addButton} onPress={() => setShowOrderForm(true)}>
          <Text style={styles.addButtonText}>+ 新增</Text>
        </TouchableOpacity>
      </View>
      
      {orders.map((order, index) => (
        <View key={order.id || index} style={styles.orderCard}>
          <Text style={styles.orderNumber}>訂單 #{order.orderNumber || order.id}</Text>
          <Text style={styles.orderCustomer}>客戶: {order.customerName || '未知客戶'}</Text>
          <Text style={styles.orderProject}>專案: {order.projectName || '未指定'}</Text>
          <Text style={styles.orderStatus}>狀態: {order.status || '待處理'}</Text>
          <Text style={styles.orderAmount}>金額: CAD ${order.totalAmount || 0}</Text>
          <Text style={styles.orderDate}>日期: {order.createdAt ? new Date(order.createdAt).toLocaleDateString() : '未知'}</Text>
          
          {order.items && order.items.length > 0 && (
            <View style={styles.orderItems}>
              <Text style={styles.orderItemsTitle}>訂單項目:</Text>
              {order.items.map((item, itemIndex) => (
                <Text key={itemIndex} style={styles.orderItem}>
                  • {item.materialName} x {item.quantity}
                </Text>
              ))}
            </View>
          )}
        </View>
      ))}

      <TouchableOpacity style={styles.backButton} onPress={() => setCurrentPage('dashboard')}>
        <Text style={styles.backText}>← 返回儀表板</Text>
      </TouchableOpacity>
    </ScrollView>
  );

  // 狀態管理
  const renderStatus = () => (
    <ScrollView style={styles.container}>
      <Text style={styles.pageTitle}>📊 狀態管理</Text>
      <Text style={styles.comingSoon}>功能開發中...</Text>
      <TouchableOpacity style={styles.backButton} onPress={() => setCurrentPage('dashboard')}>
        <Text style={styles.backText}>← 返回儀表板</Text>
      </TouchableOpacity>
    </ScrollView>
  );

  return (
    <View style={styles.app}>
      {currentPage === 'dashboard' && renderDashboard()}
      {currentPage === 'materials' && renderMaterials()}
      {currentPage === 'orders' && renderOrders()}
      {currentPage === 'status' && renderStatus()}
      
      {/* 底部導航 */}
      <View style={styles.bottomNav}>
        <TouchableOpacity style={styles.navButton} onPress={() => setCurrentPage('dashboard')}>
          <Text style={[styles.navText, currentPage === 'dashboard' && styles.activeNav]}>🏠 首頁</Text>
        </TouchableOpacity>
        <TouchableOpacity style={styles.navButton} onPress={() => setCurrentPage('materials')}>
          <Text style={[styles.navText, currentPage === 'materials' && styles.activeNav]}>📦 基材</Text>
        </TouchableOpacity>
        <TouchableOpacity style={styles.navButton} onPress={() => setCurrentPage('orders')}>
          <Text style={[styles.navText, currentPage === 'orders' && styles.activeNav]}>📋 訂單</Text>
        </TouchableOpacity>
        <TouchableOpacity style={styles.navButton} onPress={() => setCurrentPage('status')}>
          <Text style={[styles.navText, currentPage === 'status' && styles.activeNav]}>📊 狀態</Text>
        </TouchableOpacity>
      </View>

      {/* 基材新增表單 Modal */}
      <Modal visible={showMaterialForm} animationType="slide" transparent>
        <View style={styles.modalOverlay}>
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>新增基材</Text>
            
            <TextInput
              style={styles.input}
              placeholder="基材名稱 *"
              value={materialForm.name}
              onChangeText={(text) => setMaterialForm(prev => ({ ...prev, name: text }))}
            />
            
            <TextInput
              style={styles.input}
              placeholder="分類 *"
              value={materialForm.category}
              onChangeText={(text) => setMaterialForm(prev => ({ ...prev, category: text }))}
            />
            
            <TextInput
              style={styles.input}
              placeholder="供應商"
              value={materialForm.supplier}
              onChangeText={(text) => setMaterialForm(prev => ({ ...prev, supplier: text }))}
            />
            
            <View style={styles.pickerContainer}>
              <Text style={styles.pickerLabel}>材料類型:</Text>
              <Picker
                selectedValue={materialForm.type}
                onValueChange={(value) => setMaterialForm(prev => ({ ...prev, type: value }))}
                style={styles.picker}
              >
                <Picker.Item label="輔材" value="AUXILIARY" />
                <Picker.Item label="完成材" value="FINISHED" />
              </Picker>
            </View>
            
            <TextInput
              style={styles.input}
              placeholder="價格 (CAD) *"
              value={materialForm.price}
              onChangeText={(text) => setMaterialForm(prev => ({ ...prev, price: text }))}
              keyboardType="numeric"
            />
            
            <TextInput
              style={styles.input}
              placeholder="庫存數量"
              value={materialForm.quantity}
              onChangeText={(text) => setMaterialForm(prev => ({ ...prev, quantity: text }))}
              keyboardType="numeric"
            />
            
            <TouchableOpacity style={styles.imageButton} onPress={handleImagePicker}>
              <Text style={styles.imageButtonText}>
                {uploadingImage ? '上傳中...' : '📷 選擇圖片'}
              </Text>
            </TouchableOpacity>
            
            {materialForm.imageUrl && (
              <Image source={{ uri: materialForm.imageUrl }} style={styles.previewImage} />
            )}
            
            <View style={styles.modalButtons}>
              <TouchableOpacity style={styles.cancelButton} onPress={() => setShowMaterialForm(false)}>
                <Text style={styles.cancelText}>取消</Text>
              </TouchableOpacity>
              <TouchableOpacity style={styles.saveButton} onPress={handleAddMaterial}>
                <Text style={styles.saveText}>儲存</Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </Modal>

      {/* 訂單新增表單 Modal */}
      <Modal visible={showOrderForm} animationType="slide" transparent>
        <View style={styles.modalOverlay}>
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>新增訂單</Text>
            
            <TextInput
              style={styles.input}
              placeholder="客戶名稱 *"
              value={orderForm.customerName}
              onChangeText={(text) => setOrderForm(prev => ({ ...prev, customerName: text }))}
            />
            
            <TextInput
              style={styles.input}
              placeholder="專案名稱"
              value={orderForm.projectName}
              onChangeText={(text) => setOrderForm(prev => ({ ...prev, projectName: text }))}
            />
            
            <TouchableOpacity style={styles.selectButton} onPress={() => setShowMaterialSelection(true)}>
              <Text style={styles.selectButtonText}>
                📦 選擇基材 ({selectedMaterials.length} 項)
              </Text>
            </TouchableOpacity>
            
            <View style={styles.modalButtons}>
              <TouchableOpacity style={styles.cancelButton} onPress={() => setShowOrderForm(false)}>
                <Text style={styles.cancelText}>取消</Text>
              </TouchableOpacity>
              <TouchableOpacity style={styles.saveButton} onPress={handleAddOrder}>
                <Text style={styles.saveText}>建立訂單</Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </Modal>

      {loading && (
        <View style={styles.loadingOverlay}>
          <ActivityIndicator size="large" color="#007bff" />
          <Text style={styles.loadingText}>處理中...</Text>
        </View>
      )}
    </View>
  );
}

const styles = StyleSheet.create({
  app: { flex: 1, backgroundColor: '#f5f5f5' },
  
  // 登入相關
  loginContainer: { flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: '#007bff', padding: 20 },
  loginForm: { backgroundColor: '#fff', padding: 30, borderRadius: 15, width: '100%', maxWidth: 400 },
  loginTitle: { fontSize: 24, fontWeight: 'bold', textAlign: 'center', marginBottom: 10, color: '#007bff' },
  loginSubtitle: { fontSize: 16, textAlign: 'center', marginBottom: 30, color: '#666' },
  loginInput: { borderWidth: 1, borderColor: '#ddd', borderRadius: 8, padding: 15, marginBottom: 15, fontSize: 16 },
  loginButton: { backgroundColor: '#007bff', padding: 15, borderRadius: 8, alignItems: 'center' },
  loginButtonText: { color: '#fff', fontSize: 16, fontWeight: 'bold' },
  
  // 主要佈局
  container: { flex: 1, padding: 20 },
  header: { alignItems: 'center', marginBottom: 30 },
  title: { fontSize: 24, fontWeight: 'bold', color: '#007bff', marginBottom: 5 },
  subtitle: { fontSize: 16, color: '#666', marginBottom: 10 },
  logoutButton: { backgroundColor: '#dc3545', paddingHorizontal: 15, paddingVertical: 8, borderRadius: 5 },
  logoutText: { color: '#fff', fontSize: 14 },
  
  // 統計卡片
  statsContainer: { flexDirection: 'row', justifyContent: 'space-around', marginBottom: 30 },
  statCard: { backgroundColor: '#fff', padding: 20, borderRadius: 10, alignItems: 'center', minWidth: 120, elevation: 3 },
  statNumber: { fontSize: 32, fontWeight: 'bold', color: '#007bff' },
  statLabel: { fontSize: 14, color: '#666', marginTop: 5 },
  
  // 快速操作
  quickActions: { gap: 15 },
  actionButton: { backgroundColor: '#007bff', padding: 15, borderRadius: 10, alignItems: 'center' },
  actionText: { color: '#fff', fontSize: 16, fontWeight: 'bold' },
  
  // 頁面標題
  pageHeader: { flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center', marginBottom: 20 },
  pageTitle: { fontSize: 24, fontWeight: 'bold', color: '#007bff' },
  addButton: { backgroundColor: '#28a745', paddingHorizontal: 15, paddingVertical: 8, borderRadius: 8 },
  addButtonText: { color: '#fff', fontSize: 14, fontWeight: 'bold' },
  
  // 基材卡片
  materialCard: { backgroundColor: '#fff', padding: 15, borderRadius: 10, marginBottom: 15, elevation: 2, flexDirection: 'row' },
  materialImage: { width: 80, height: 80, borderRadius: 8, marginRight: 15 },
  materialInfo: { flex: 1 },
  materialName: { fontSize: 18, fontWeight: 'bold', color: '#333', marginBottom: 5 },
  materialCategory: { fontSize: 14, color: '#666', marginBottom: 3 },
  materialSupplier: { fontSize: 14, color: '#666', marginBottom: 3 },
  materialType: { fontSize: 14, color: '#007bff', marginBottom: 3 },
  materialPrice: { fontSize: 16, color: '#28a745', fontWeight: 'bold', marginBottom: 3 },
  materialQuantity: { fontSize: 14, color: '#666' },
  
  // 訂單卡片
  orderCard: { backgroundColor: '#fff', padding: 15, borderRadius: 10, marginBottom: 15, elevation: 2 },
  orderNumber: { fontSize: 16, fontWeight: 'bold', color: '#333', marginBottom: 5 },
  orderCustomer: { fontSize: 14, color: '#666', marginBottom: 3 },
  orderProject: { fontSize: 14, color: '#666', marginBottom: 3 },
  orderStatus: { fontSize: 14, color: '#ffc107', marginBottom: 3 },
  orderAmount: { fontSize: 16, color: '#28a745', fontWeight: 'bold', marginBottom: 3 },
  orderDate: { fontSize: 12, color: '#999', marginBottom: 10 },
  orderItems: { borderTopWidth: 1, borderTopColor: '#eee', paddingTop: 10 },
  orderItemsTitle: { fontSize: 14, fontWeight: 'bold', color: '#333', marginBottom: 5 },
  orderItem: { fontSize: 13, color: '#666', marginBottom: 2 },
  
  // Modal
  modalOverlay: { flex: 1, backgroundColor: 'rgba(0,0,0,0.5)', justifyContent: 'center', alignItems: 'center' },
  modalContent: { backgroundColor: '#fff', padding: 20, borderRadius: 15, width: '90%', maxHeight: '80%' },
  modalTitle: { fontSize: 20, fontWeight: 'bold', textAlign: 'center', marginBottom: 20, color: '#333' },
  input: { borderWidth: 1, borderColor: '#ddd', borderRadius: 8, padding: 12, marginBottom: 15, fontSize: 16 },
  
  // Picker
  pickerContainer: { marginBottom: 15 },
  pickerLabel: { fontSize: 16, color: '#333', marginBottom: 5 },
  picker: { borderWidth: 1, borderColor: '#ddd', borderRadius: 8 },
  
  // 按鈕
  modalButtons: { flexDirection: 'row', justifyContent: 'space-between', gap: 10, marginTop: 20 },
  cancelButton: { flex: 1, backgroundColor: '#6c757d', padding: 12, borderRadius: 8, alignItems: 'center' },
  cancelText: { color: '#fff', fontSize: 16, fontWeight: 'bold' },
  saveButton: { flex: 1, backgroundColor: '#28a745', padding: 12, borderRadius: 8, alignItems: 'center' },
  saveText: { color: '#fff', fontSize: 16, fontWeight: 'bold' },
  
  imageButton: { backgroundColor: '#17a2b8', padding: 12, borderRadius: 8, alignItems: 'center', marginBottom: 15 },
  imageButtonText: { color: '#fff', fontSize: 16, fontWeight: 'bold' },
  previewImage: { width: 100, height: 100, borderRadius: 8, alignSelf: 'center', marginBottom: 15 },
  
  selectButton: { backgroundColor: '#007bff', padding: 12, borderRadius: 8, alignItems: 'center', marginBottom: 15 },
  selectButtonText: { color: '#fff', fontSize: 16, fontWeight: 'bold' },
  
  backButton: { backgroundColor: '#6c757d', padding: 12, borderRadius: 8, alignItems: 'center', marginTop: 20 },
  backText: { color: '#fff', fontSize: 16 },
  
  // 底部導航
  bottomNav: { flexDirection: 'row', backgroundColor: '#fff', paddingVertical: 10, borderTopWidth: 1, borderTopColor: '#ddd' },
  navButton: { flex: 1, alignItems: 'center', paddingVertical: 10 },
  navText: { fontSize: 12, color: '#007bff' },
  activeNav: { fontWeight: 'bold', color: '#0056b3' },
  
  // 載入覆蓋層
  loadingOverlay: { position: 'absolute', top: 0, left: 0, right: 0, bottom: 0, backgroundColor: 'rgba(0,0,0,0.5)', justifyContent: 'center', alignItems: 'center' },
  loadingText: { color: '#fff', marginTop: 10, fontSize: 16 },
  
  // 其他
  comingSoon: { textAlign: 'center', color: '#666', fontSize: 16, marginVertical: 40 },
});