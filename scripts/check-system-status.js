#!/usr/bin/env node\n\nconst fs = require('fs');\nconst path = require('path');\nconst { execSync } = require('child_process');\n\n/**\n * 系統狀態檢查腳本\n */\n\nconst REQUIRED_FILES = {\n  // 後端檔案\n  'backend/src/server.ts': '後端伺服器入口',\n  'backend/package.json': '後端依賴配置',\n  'backend/src/config/database.ts': '資料庫配置',\n  'backend/src/config/environment.ts': '環境配置',\n  'backend/Dockerfile': '後端 Docker 配置',\n  \n  // 前端檔案\n  'frontend/src/App.tsx': '前端應用程式入口',\n  'frontend/src/main.tsx': '前端主檔案',\n  'frontend/package.json': '前端依賴配置',\n  'frontend/vite.config.ts': 'Vite 配置',\n  'frontend/Dockerfile': '前端 Docker 配置',\n  \n  // Docker 配置\n  'docker-compose.yml': '生產環境 Docker Compose',\n  'docker-compose.dev.yml': '開發環境 Docker Compose',\n  'Makefile': 'Make 命令配置',\n  \n  // 環境配置\n  '.env.example': '環境變數範例',\n  'backend/.env.development': '後端開發環境配置',\n  'backend/.env.test': '後端測試環境配置',\n  'backend/.env.production': '後端生產環境配置',\n  'frontend/.env.development': '前端開發環境配置',\n  'frontend/.env.test': '前端測試環境配置',\n  'frontend/.env.production': '前端生產環境配置',\n  \n  // 文件\n  'README.md': '專案說明文件',\n  'DOCKER.md': 'Docker 部署指南',\n  'ENVIRONMENT.md': '環境配置指南',\n  'TESTING.md': '測試指南'\n};\n\nconst REQUIRED_DIRECTORIES = {\n  'backend/src': '後端原始碼',\n  'frontend/src': '前端原始碼',\n  'database/init': '資料庫初始化腳本',\n  'scripts': '工具腳本',\n  '.github/workflows': 'CI/CD 工作流程'\n};\n\nfunction checkSystemStatus() {\n  console.log('🔍 檢查雲水基材管理系統狀態...');\n  console.log('=' .repeat(50));\n  \n  let allGood = true;\n  \n  // 檢查必要檔案\n  console.log('\\n📁 檢查必要檔案:');\n  for (const [filePath, description] of Object.entries(REQUIRED_FILES)) {\n    if (fs.existsSync(filePath)) {\n      console.log(`✅ ${description}: ${filePath}`);\n    } else {\n      console.log(`❌ ${description}: ${filePath} (缺失)`);\n      allGood = false;\n    }\n  }\n  \n  // 檢查必要目錄\n  console.log('\\n📂 檢查必要目錄:');\n  for (const [dirPath, description] of Object.entries(REQUIRED_DIRECTORIES)) {\n    if (fs.existsSync(dirPath) && fs.statSync(dirPath).isDirectory()) {\n      console.log(`✅ ${description}: ${dirPath}`);\n    } else {\n      console.log(`❌ ${description}: ${dirPath} (缺失)`);\n      allGood = false;\n    }\n  }\n  \n  // 檢查依賴安裝狀態\n  console.log('\\n📦 檢查依賴安裝狀態:');\n  \n  // 檢查後端依賴\n  if (fs.existsSync('backend/node_modules')) {\n    console.log('✅ 後端依賴已安裝');\n  } else {\n    console.log('⚠️  後端依賴未安裝 (執行: cd backend && npm install)');\n  }\n  \n  // 檢查前端依賴\n  if (fs.existsSync('frontend/node_modules')) {\n    console.log('✅ 前端依賴已安裝');\n  } else {\n    console.log('⚠️  前端依賴未安裝 (執行: cd frontend && npm install)');\n  }\n  \n  // 檢查 Docker\n  console.log('\\n🐳 檢查 Docker 環境:');\n  try {\n    execSync('docker --version', { stdio: 'pipe' });\n    console.log('✅ Docker 已安裝');\n    \n    try {\n      execSync('docker-compose --version', { stdio: 'pipe' });\n      console.log('✅ Docker Compose 已安裝');\n    } catch {\n      console.log('⚠️  Docker Compose 未安裝');\n    }\n  } catch {\n    console.log('⚠️  Docker 未安裝');\n  }\n  \n  // 檢查環境配置\n  console.log('\\n⚙️  檢查環境配置:');\n  if (fs.existsSync('.env')) {\n    console.log('✅ 主環境配置檔案存在');\n  } else {\n    console.log('⚠️  主環境配置檔案不存在 (複製 .env.example 到 .env)');\n  }\n  \n  // 檢查任務完成狀態\n  console.log('\\n📋 檢查任務完成狀態:');\n  if (fs.existsSync('.kiro/specs/yun-shui-material-management/tasks.md')) {\n    const tasksContent = fs.readFileSync('.kiro/specs/yun-shui-material-management/tasks.md', 'utf8');\n    const completedTasks = (tasksContent.match(/- \\[x\\]/g) || []).length;\n    const totalTasks = (tasksContent.match(/- \\[[ x]\\]/g) || []).length;\n    \n    console.log(`📊 任務完成進度: ${completedTasks}/${totalTasks} (${Math.round(completedTasks/totalTasks*100)}%)`);\n    \n    if (completedTasks === totalTasks) {\n      console.log('🎉 所有任務已完成！');\n    } else {\n      console.log(`⏳ 還有 ${totalTasks - completedTasks} 個任務待完成`);\n    }\n  }\n  \n  // 總結\n  console.log('\\n' + '=' .repeat(50));\n  if (allGood) {\n    console.log('🎉 系統檢查完成！所有必要檔案都存在。');\n    console.log('\\n🚀 系統可以運行！請參考以下運行方式：');\n    printRunInstructions();\n  } else {\n    console.log('⚠️  系統檢查發現問題，請修復缺失的檔案後再運行。');\n  }\n}\n\nfunction printRunInstructions() {\n  console.log('\\n📖 運行方式:');\n  console.log('\\n1. 🐳 使用 Docker (推薦):');\n  console.log('   make dev          # 啟動開發環境');\n  console.log('   make prod         # 啟動生產環境');\n  console.log('   make help         # 查看所有可用命令');\n  \n  console.log('\\n2. 📦 手動運行:');\n  console.log('   # 設定環境');\n  console.log('   node scripts/setup-environment.js');\n  console.log('   ');\n  console.log('   # 安裝依賴');\n  console.log('   cd backend && npm install');\n  console.log('   cd frontend && npm install');\n  console.log('   ');\n  console.log('   # 啟動資料庫 (使用 Docker)');\n  console.log('   docker-compose -f docker-compose.dev.yml up -d database redis');\n  console.log('   ');\n  console.log('   # 執行資料庫遷移');\n  console.log('   cd backend && npm run migrate:up');\n  console.log('   ');\n  console.log('   # 啟動後端');\n  console.log('   cd backend && npm run dev');\n  console.log('   ');\n  console.log('   # 啟動前端 (新終端)');\n  console.log('   cd frontend && npm run dev');\n  \n  console.log('\\n3. 🧪 執行測試:');\n  console.log('   cd backend && npm test              # 單元測試');\n  console.log('   cd backend && npm run test:integration  # 整合測試');\n  console.log('   node scripts/run-integration-tests.js  # 完整測試套件');\n  \n  console.log('\\n4. 🔧 其他有用命令:');\n  console.log('   cd backend && npm run env:validate     # 驗證環境配置');\n  console.log('   curl http://localhost:3001/health      # 檢查後端健康狀態');\n  console.log('   make status                            # 查看服務狀態');\n  \n  console.log('\\n📚 更多資訊:');\n  console.log('   - README.md: 專案概覽和快速開始');\n  console.log('   - DOCKER.md: Docker 部署詳細指南');\n  console.log('   - ENVIRONMENT.md: 環境配置詳細說明');\n  console.log('   - TESTING.md: 測試指南');\n  \n  console.log('\\n🌐 預設存取位址:');\n  console.log('   - 前端: http://localhost:3000');\n  console.log('   - 後端 API: http://localhost:3001');\n  console.log('   - 後端健康檢查: http://localhost:3001/health');\n  console.log('   - pgAdmin (開發環境): http://localhost:5050');\n}\n\n// 執行檢查\nif (require.main === module) {\n  checkSystemStatus();\n}\n\nmodule.exports = { checkSystemStatus };"