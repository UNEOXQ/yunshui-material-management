#!/usr/bin/env node\n\nconst fs = require('fs');\nconst path = require('path');\nconst crypto = require('crypto');\nconst readline = require('readline');\n\n/**\n * 環境配置設定腳本\n */\n\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n\n/**\n * 詢問使用者輸入\n */\nfunction askQuestion(question, defaultValue = '') {\n  return new Promise((resolve) => {\n    const prompt = defaultValue ? `${question} (${defaultValue}): ` : `${question}: `;\n    rl.question(prompt, (answer) => {\n      resolve(answer.trim() || defaultValue);\n    });\n  });\n}\n\n/**\n * 生成安全的隨機金鑰\n */\nfunction generateSecretKey(length = 64) {\n  return crypto.randomBytes(length).toString('hex');\n}\n\n/**\n * 生成密碼\n */\nfunction generatePassword(length = 16) {\n  const charset = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*';\n  let password = '';\n  for (let i = 0; i < length; i++) {\n    password += charset.charAt(Math.floor(Math.random() * charset.length));\n  }\n  return password;\n}\n\n/**\n * 檢查檔案是否存在\n */\nfunction fileExists(filePath) {\n  try {\n    fs.accessSync(filePath);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * 創建環境配置檔案\n */\nfunction createEnvFile(filePath, config) {\n  const content = Object.entries(config)\n    .map(([key, value]) => `${key}=${value}`)\n    .join('\\n');\n  \n  fs.writeFileSync(filePath, content + '\\n');\n  console.log(`✅ Created: ${filePath}`);\n}\n\n/**\n * 主要設定流程\n */\nasync function setupEnvironment() {\n  console.log('🚀 Yun Shui Material Management System - Environment Setup');\n  console.log('=========================================================\\n');\n  \n  // 選擇環境\n  console.log('Please select the environment to configure:');\n  console.log('1. Development');\n  console.log('2. Production');\n  console.log('3. Test');\n  console.log('4. All environments\\n');\n  \n  const envChoice = await askQuestion('Enter your choice (1-4)', '1');\n  \n  const environments = [];\n  switch (envChoice) {\n    case '1':\n      environments.push('development');\n      break;\n    case '2':\n      environments.push('production');\n      break;\n    case '3':\n      environments.push('test');\n      break;\n    case '4':\n      environments.push('development', 'production', 'test');\n      break;\n    default:\n      console.log('Invalid choice. Defaulting to development.');\n      environments.push('development');\n  }\n  \n  for (const env of environments) {\n    console.log(`\\n🔧 Configuring ${env} environment...`);\n    await configureEnvironment(env);\n  }\n  \n  console.log('\\n🎉 Environment setup completed!');\n  console.log('\\nNext steps:');\n  console.log('1. Review the generated .env files');\n  console.log('2. Update any placeholder values (marked with CHANGE_ME)');\n  console.log('3. Run: npm run validate:env (backend)');\n  console.log('4. Start the application: make dev (or make prod)');\n  \n  rl.close();\n}\n\n/**\n * 配置特定環境\n */\nasync function configureEnvironment(env) {\n  const isProduction = env === 'production';\n  const isTest = env === 'test';\n  \n  // 基本配置\n  console.log(`\\n📋 Basic configuration for ${env}:`);\n  \n  const dbName = await askQuestion('Database name', `yun_shui_materials${isTest ? '_test' : isProduction ? '' : '_dev'}`);\n  const dbUser = await askQuestion('Database user', 'postgres');\n  const dbPassword = isProduction \n    ? await askQuestion('Database password (leave empty to generate)', '') || generatePassword()\n    : await askQuestion('Database password', `${env}_password`);\n  \n  const redisPassword = isProduction \n    ? await askQuestion('Redis password (leave empty to generate)', '') || generatePassword()\n    : '';\n  \n  // 安全配置\n  console.log(`\\n🔐 Security configuration for ${env}:`);\n  \n  const jwtSecret = generateSecretKey();\n  const jwtRefreshSecret = generateSecretKey();\n  \n  const corsOrigin = isProduction \n    ? await askQuestion('CORS origin (your domain)', 'https://your-domain.com')\n    : 'http://localhost:3000';\n  \n  // 後端配置\n  const backendConfig = {\n    NODE_ENV: env,\n    PORT: isTest ? 3002 : 3001,\n    \n    // 資料庫\n    DB_HOST: isProduction ? 'database' : 'localhost',\n    DB_PORT: 5432,\n    DB_NAME: dbName,\n    DB_USER: dbUser,\n    DB_PASSWORD: dbPassword,\n    DB_SSL: isProduction,\n    DB_POOL_MIN: isTest ? 1 : isProduction ? 5 : 2,\n    DB_POOL_MAX: isTest ? 3 : isProduction ? 20 : 5,\n    \n    // Redis\n    REDIS_HOST: isProduction ? 'redis' : 'localhost',\n    REDIS_PORT: 6379,\n    REDIS_PASSWORD: redisPassword,\n    REDIS_DB: isTest ? 1 : 0,\n    \n    // JWT\n    JWT_SECRET: jwtSecret,\n    JWT_EXPIRES_IN: isTest ? '1h' : '24h',\n    JWT_REFRESH_SECRET: jwtRefreshSecret,\n    JWT_REFRESH_EXPIRES_IN: isTest ? '1d' : '7d',\n    \n    // 檔案上傳\n    UPLOAD_PATH: isTest ? './test_uploads' : './uploads',\n    MAX_FILE_SIZE: isTest ? 1048576 : 5242880,\n    ALLOWED_FILE_TYPES: 'image/jpeg,image/png,image/webp',\n    \n    // CORS\n    CORS_ORIGIN: corsOrigin,\n    CORS_CREDENTIALS: true,\n    \n    // 安全\n    BCRYPT_ROUNDS: isTest ? 4 : isProduction ? 12 : 10,\n    RATE_LIMIT_WINDOW_MS: isTest ? 60000 : 900000,\n    RATE_LIMIT_MAX_REQUESTS: isTest ? 1000 : isProduction ? 100 : 1000,\n    \n    // 日誌\n    LOG_LEVEL: isTest ? 'error' : isProduction ? 'info' : 'debug',\n    LOG_FILE_PATH: isTest ? './test_logs' : './logs',\n    \n    // 監控\n    HEALTH_CHECK_INTERVAL: isTest ? 10000 : 30000,\n    METRICS_ENABLED: !isTest\n  };\n  \n  // 前端配置\n  const frontendConfig = {\n    VITE_NODE_ENV: env,\n    \n    // API\n    VITE_API_URL: isProduction ? '/api' : `http://localhost:${backendConfig.PORT}/api`,\n    VITE_WS_URL: isProduction ? '' : `http://localhost:${backendConfig.PORT}`,\n    \n    // 功能開關\n    VITE_ENABLE_MOCK_DATA: !isProduction,\n    VITE_ENABLE_DEBUG_MODE: !isProduction && !isTest,\n    VITE_ENABLE_ANALYTICS: isProduction,\n    \n    // UI\n    VITE_DEFAULT_LANGUAGE: 'zh-TW',\n    VITE_THEME: 'light',\n    \n    // 檔案上傳\n    VITE_MAX_FILE_SIZE: backendConfig.MAX_FILE_SIZE,\n    VITE_ALLOWED_FILE_TYPES: backendConfig.ALLOWED_FILE_TYPES,\n    \n    // 快取\n    VITE_CACHE_DURATION: isTest ? 60000 : 300000,\n    \n    // 效能\n    VITE_PAGINATION_SIZE: isTest ? 10 : 20,\n    VITE_DEBOUNCE_DELAY: isTest ? 100 : 300,\n    \n    // 安全\n    VITE_SESSION_TIMEOUT: isTest ? 3600000 : 86400000,\n    VITE_AUTO_LOGOUT_WARNING: 300000\n  };\n  \n  // 創建配置檔案\n  const backendEnvFile = path.join('backend', `.env.${env}`);\n  const frontendEnvFile = path.join('frontend', `.env.${env}`);\n  \n  // 檢查是否覆蓋現有檔案\n  if (fileExists(backendEnvFile)) {\n    const overwrite = await askQuestion(`${backendEnvFile} already exists. Overwrite? (y/n)`, 'n');\n    if (overwrite.toLowerCase() !== 'y') {\n      console.log(`⏭️  Skipped: ${backendEnvFile}`);\n    } else {\n      createEnvFile(backendEnvFile, backendConfig);\n    }\n  } else {\n    createEnvFile(backendEnvFile, backendConfig);\n  }\n  \n  if (fileExists(frontendEnvFile)) {\n    const overwrite = await askQuestion(`${frontendEnvFile} already exists. Overwrite? (y/n)`, 'n');\n    if (overwrite.toLowerCase() !== 'y') {\n      console.log(`⏭️  Skipped: ${frontendEnvFile}`);\n    } else {\n      createEnvFile(frontendEnvFile, frontendConfig);\n    }\n  } else {\n    createEnvFile(frontendEnvFile, frontendConfig);\n  }\n  \n  // 創建主要 .env 檔案（如果是生產環境）\n  if (env === 'production') {\n    const mainEnvFile = '.env';\n    if (!fileExists(mainEnvFile)) {\n      createEnvFile(mainEnvFile, backendConfig);\n    }\n  }\n  \n  // 顯示重要資訊\n  if (isProduction) {\n    console.log(`\\n🔑 Important credentials for ${env}:`);\n    console.log(`Database Password: ${dbPassword}`);\n    if (redisPassword) {\n      console.log(`Redis Password: ${redisPassword}`);\n    }\n    console.log('⚠️  Please store these credentials securely!');\n  }\n}\n\n// 執行設定\nif (require.main === module) {\n  setupEnvironment().catch(error => {\n    console.error('❌ Setup failed:', error);\n    process.exit(1);\n  });\n}\n\nmodule.exports = { setupEnvironment };"