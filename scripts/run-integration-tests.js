#!/usr/bin/env node\n\nconst { spawn } = require('child_process');\nconst path = require('path');\nconst fs = require('fs');\n\n/**\n * 整合測試執行腳本\n */\n\nconst DOCKER_COMPOSE_FILE = 'docker-compose.test.yml';\nconst TEST_ENV_FILE = '.env.test';\n\n/**\n * 主要執行函數\n */\nasync function runIntegrationTests() {\n  console.log('🚀 Starting Integration Tests...');\n  console.log('=====================================\\n');\n  \n  try {\n    // 1. 檢查環境\n    await checkEnvironment();\n    \n    // 2. 啟動測試服務\n    await startTestServices();\n    \n    // 3. 等待服務就緒\n    await waitForServices();\n    \n    // 4. 執行資料庫遷移\n    await runMigrations();\n    \n    // 5. 執行整合測試\n    await runTests();\n    \n    console.log('\\n✅ Integration tests completed successfully!');\n    \n  } catch (error) {\n    console.error('\\n❌ Integration tests failed:', error.message);\n    process.exit(1);\n  } finally {\n    // 6. 清理測試環境\n    await cleanup();\n  }\n}\n\n/**\n * 檢查測試環境\n */\nasync function checkEnvironment() {\n  console.log('🔍 Checking test environment...');\n  \n  // 檢查 Docker\n  try {\n    await runCommand('docker', ['--version']);\n    await runCommand('docker-compose', ['--version']);\n  } catch (error) {\n    throw new Error('Docker or Docker Compose not found. Please install Docker.');\n  }\n  \n  // 檢查測試環境檔案\n  if (!fs.existsSync(path.join('backend', TEST_ENV_FILE))) {\n    console.log('⚠️  Test environment file not found, creating default...');\n    await createTestEnvFile();\n  }\n  \n  console.log('✅ Environment check passed');\n}\n\n/**\n * 創建測試環境檔案\n */\nasync function createTestEnvFile() {\n  const testEnvContent = `# Integration Test Environment\nNODE_ENV=test\nPORT=3002\nDB_HOST=localhost\nDB_PORT=5433\nDB_NAME=yun_shui_materials_integration_test\nDB_USER=postgres\nDB_PASSWORD=test_password\nDB_SSL=false\nREDIS_HOST=localhost\nREDIS_PORT=6380\nJWT_SECRET=integration_test_jwt_secret_key_at_least_32_characters_long\nJWT_REFRESH_SECRET=integration_test_refresh_secret_key_at_least_32_characters_long\nUPLOAD_PATH=./test_uploads\nLOG_LEVEL=error\n`;\n  \n  fs.writeFileSync(path.join('backend', TEST_ENV_FILE), testEnvContent);\n  console.log('✅ Test environment file created');\n}\n\n/**\n * 啟動測試服務\n */\nasync function startTestServices() {\n  console.log('🐳 Starting test services...');\n  \n  // 創建測試用的 docker-compose 檔案\n  await createTestDockerCompose();\n  \n  // 啟動服務\n  await runCommand('docker-compose', ['-f', DOCKER_COMPOSE_FILE, 'up', '-d']);\n  \n  console.log('✅ Test services started');\n}\n\n/**\n * 創建測試用的 Docker Compose 檔案\n */\nasync function createTestDockerCompose() {\n  const dockerComposeContent = `version: '3.8'\n\nservices:\n  test-database:\n    image: postgres:15-alpine\n    container_name: yun-shui-test-db\n    environment:\n      POSTGRES_DB: yun_shui_materials_integration_test\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD: test_password\n    ports:\n      - \"5433:5432\"\n    volumes:\n      - test_postgres_data:/var/lib/postgresql/data\n      - ./database/init:/docker-entrypoint-initdb.d\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U postgres -d yun_shui_materials_integration_test\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n\n  test-redis:\n    image: redis:7-alpine\n    container_name: yun-shui-test-redis\n    ports:\n      - \"6380:6379\"\n    volumes:\n      - test_redis_data:/data\n    healthcheck:\n      test: [\"CMD\", \"redis-cli\", \"ping\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n\nvolumes:\n  test_postgres_data:\n  test_redis_data:\n`;\n  \n  fs.writeFileSync(DOCKER_COMPOSE_FILE, dockerComposeContent);\n}\n\n/**\n * 等待服務就緒\n */\nasync function waitForServices() {\n  console.log('⏳ Waiting for services to be ready...');\n  \n  // 等待資料庫就緒\n  await waitForService('test-database', 'Database');\n  \n  // 等待 Redis 就緒\n  await waitForService('test-redis', 'Redis');\n  \n  console.log('✅ All services are ready');\n}\n\n/**\n * 等待特定服務就緒\n */\nasync function waitForService(serviceName, displayName) {\n  const maxRetries = 30;\n  let retries = 0;\n  \n  while (retries < maxRetries) {\n    try {\n      const result = await runCommand('docker-compose', [\n        '-f', DOCKER_COMPOSE_FILE,\n        'exec', '-T', serviceName,\n        'sh', '-c', 'exit 0'\n      ], { stdio: 'pipe' });\n      \n      if (result.code === 0) {\n        console.log(`✅ ${displayName} is ready`);\n        return;\n      }\n    } catch (error) {\n      // Service not ready yet\n    }\n    \n    retries++;\n    console.log(`⏳ Waiting for ${displayName}... (${retries}/${maxRetries})`);\n    await sleep(2000);\n  }\n  \n  throw new Error(`${displayName} failed to start after ${maxRetries} retries`);\n}\n\n/**\n * 執行資料庫遷移\n */\nasync function runMigrations() {\n  console.log('🗄️  Running database migrations...');\n  \n  try {\n    await runCommand('npm', ['run', 'migrate:up'], {\n      cwd: path.join(process.cwd(), 'backend'),\n      env: { ...process.env, NODE_ENV: 'test' }\n    });\n    console.log('✅ Database migrations completed');\n  } catch (error) {\n    console.log('⚠️  Migration failed, but continuing with tests...');\n  }\n}\n\n/**\n * 執行測試\n */\nasync function runTests() {\n  console.log('🧪 Running integration tests...');\n  \n  const testTypes = [\n    { name: 'API Integration Tests', pattern: 'integration/*.test.ts' },\n    { name: 'E2E Tests', pattern: 'e2e/*.test.ts' },\n    { name: 'System Integration Tests', pattern: 'integration/system.*.test.ts' }\n  ];\n  \n  for (const testType of testTypes) {\n    console.log(`\\n📋 Running ${testType.name}...`);\n    \n    try {\n      await runCommand('npx', [\n        'jest',\n        '--config', 'jest.integration.config.js',\n        '--testPathPattern', testType.pattern,\n        '--verbose'\n      ], {\n        cwd: path.join(process.cwd(), 'backend'),\n        env: { ...process.env, NODE_ENV: 'test' }\n      });\n      \n      console.log(`✅ ${testType.name} passed`);\n    } catch (error) {\n      throw new Error(`${testType.name} failed`);\n    }\n  }\n}\n\n/**\n * 清理測試環境\n */\nasync function cleanup() {\n  console.log('\\n🧹 Cleaning up test environment...');\n  \n  try {\n    // 停止並移除測試服務\n    await runCommand('docker-compose', ['-f', DOCKER_COMPOSE_FILE, 'down', '-v']);\n    \n    // 移除測試檔案\n    if (fs.existsSync(DOCKER_COMPOSE_FILE)) {\n      fs.unlinkSync(DOCKER_COMPOSE_FILE);\n    }\n    \n    console.log('✅ Cleanup completed');\n  } catch (error) {\n    console.error('⚠️  Cleanup failed:', error.message);\n  }\n}\n\n/**\n * 執行命令\n */\nfunction runCommand(command, args, options = {}) {\n  return new Promise((resolve, reject) => {\n    const child = spawn(command, args, {\n      stdio: options.stdio || 'inherit',\n      cwd: options.cwd || process.cwd(),\n      env: options.env || process.env\n    });\n    \n    child.on('close', (code) => {\n      if (code === 0) {\n        resolve({ code });\n      } else {\n        reject(new Error(`Command failed with exit code ${code}`));\n      }\n    });\n    \n    child.on('error', (error) => {\n      reject(error);\n    });\n  });\n}\n\n/**\n * 延遲函數\n */\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n// 執行測試\nif (require.main === module) {\n  runIntegrationTests().catch(error => {\n    console.error('Fatal error:', error);\n    process.exit(1);\n  });\n}\n\nmodule.exports = { runIntegrationTests };"